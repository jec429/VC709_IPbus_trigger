<?xml version="1.0" encoding="UTF-8"?>
<spirit:component xmlns:xilinx="http://www.xilinx.com"
		xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<spirit:vendor>xilinx.com</spirit:vendor>
	<spirit:library>customized_ip</spirit:library>
	<spirit:name>aurora_8b10b_0</spirit:name>
	<spirit:version>1.0</spirit:version>
	<spirit:busInterfaces>
		<spirit:busInterface>
			<spirit:name>USER_DATA_S_AXI_TX</spirit:name>
			<spirit:displayName>USER_DATA_S_AXI_TX</spirit:displayName>
			<spirit:description>User data AXI-Stream TX interface</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_tx_tvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_tx_tready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_tx_tdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TKEEP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_tx_tkeep</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_tx_tlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.INTERFACE_MODE&apos;))!=&quot;Streaming&quot;))">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>USER_DATA_M_AXI_RX</spirit:name>
			<spirit:displayName>USER_DATA_M_AXI_RX</spirit:displayName>
			<spirit:description>User data AXI-Stream RX interface</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_rx_tvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_rx_tdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TKEEP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_rx_tkeep</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>m_axi_rx_tlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.INTERFACE_MODE&apos;))!=&quot;Streaming&quot;))">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>user_clk_out</spirit:name>
			<spirit:displayName>user_clk_out</spirit:displayName>
			<spirit:description>user_clk frequency depends on line rate and this clock is available when shared logic is in IP</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>user_clk_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.USER_CLK_OUT.ASSOCIATED_BUSIF">USER_DATA_S_AXI_TX:USER_DATA_M_AXI_RX</spirit:value>
				</spirit:parameter>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_RESET</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.USER_CLK_OUT.ASSOCIATED_RESET">reset</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>reset</spirit:name>
			<spirit:displayName>reset</spirit:displayName>
			<spirit:description>Active high reset required to be asserted for 6 clock cycles of USER_CLK</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>reset</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.RESET.POLARITY">ACTIVE_HIGH</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;Duplex&quot;)">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>user_clk</spirit:name>
			<spirit:displayName>user_clk</spirit:displayName>
			<spirit:description>user_clk frequency depends on line rate</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>user_clk</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.USER_CLK.ASSOCIATED_BUSIF">USER_DATA_S_AXI_TX:USER_DATA_M_AXI_RX</spirit:value>
				</spirit:parameter>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_RESET</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.USER_CLK.ASSOCIATED_RESET">reset</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false())">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>init_clk_out</spirit:name>
			<spirit:displayName>init_clk_out</spirit:displayName>
			<spirit:description>200 MHz independent system clock</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>init_clk_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.INIT_CLK_OUT.ASSOCIATED_BUSIF">gt_reset_out</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>sys_reset_out</spirit:name>
			<spirit:displayName>sys_reset_out</spirit:displayName>
			<spirit:description>system reset available when shared logic is in IP</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>sys_reset_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.SYS_RESET_OUT.POLARITY">ACTIVE_HIGH</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt_reset</spirit:name>
			<spirit:displayName>gt_reset</spirit:displayName>
			<spirit:description>GT reset sampled in INIT_CLK and asserted for 6 clock cycles and after assertion of reset</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt_reset</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.GT_RESET.POLARITY">ACTIVE_HIGH</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt_reset_out</spirit:name>
			<spirit:displayName>gt_reset_out</spirit:displayName>
			<spirit:description>GT reset generated when shared logic is in IP</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt_reset_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.GT_RESET_OUT.POLARITY">ACTIVE_HIGH</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>init_clk_in</spirit:name>
			<spirit:displayName>init_clk_in</spirit:displayName>
			<spirit:description>200 MHz independent system clock</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>init_clk_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.INIT_CLK_IN.ASSOCIATED_BUSIF">gt_reset</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false())">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt_refclk1_out</spirit:name>
			<spirit:displayName>gt_refclk1_out</spirit:displayName>
			<spirit:description>GT REFCLK1 when shared logic is in IP</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt_refclk1_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.GT_REFCLK1_OUT.ASSOCIATED_BUSIF">gt_control_status_if</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt_refclk2_out</spirit:name>
			<spirit:displayName>gt_refclk2_out</spirit:displayName>
			<spirit:description>GT REFCLK2 when shared logic is in IP</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt_refclk2_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.GT_REFCLK2_OUT.ASSOCIATED_BUSIF">gt_control_status_if</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_CLOCK_2&apos;))!=&quot;None&quot;))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt_control_status_if</spirit:name>
			<spirit:displayName>gt_control_status_if</spirit:displayName>
			<spirit:description>gt control and status output signals</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_xaui"
					spirit:name="gt_7series_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_xaui"
					spirit:name="gt_7series_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>loopback</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>loopback</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>rx_resetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>tx_resetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>cplllock</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>tx_lock</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt_diff_refclk1</spirit:name>
			<spirit:displayName>gt_diff_refclk1</spirit:displayName>
			<spirit:description>Differential GT REFCLK1 and depends on line rate</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="diff_clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="diff_clock_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK_P</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt_refclk1_p</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK_N</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt_refclk1_n</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.GT_DIFF_REFCLK1.ASSOCIATED_BUSIF">gt_control_status_if</spirit:value>
				</spirit:parameter>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_RESET</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.GT_DIFF_REFCLK1.ASSOCIATED_RESET">gt_reset</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt_diff_refclk2</spirit:name>
			<spirit:displayName>gt_diff_refclk2</spirit:displayName>
			<spirit:description>Differential GT REFCLK2 and depends on line rate</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="diff_clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="diff_clock_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK_P</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt_refclk2_p</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK_N</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt_refclk2_n</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.GT_DIFF_REFCLK2.ASSOCIATED_BUSIF">gt_control_status_if</spirit:value>
				</spirit:parameter>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_RESET</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.GT_DIFF_REFCLK2.ASSOCIATED_RESET">gt_reset</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_CLOCK_2&apos;))!=&quot;None&quot;))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>init_diff_clk</spirit:name>
			<spirit:displayName>init_diff_clk</spirit:displayName>
			<spirit:description>200 MHz independent system clock</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="diff_clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="diff_clock_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK_P</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>init_clk_p</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK_N</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>init_clk_n</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.INIT_DIFF_CLK.ASSOCIATED_BUSIF">gt_control_status_if</spirit:value>
				</spirit:parameter>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_RESET</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.INIT_DIFF_CLK.ASSOCIATED_RESET">gt_reset</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>rx_system_reset</spirit:name>
			<spirit:displayName>rx_system_reset</spirit:displayName>
			<spirit:description>Aurora IP reset for Simplex-RX config</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>rx_system_reset</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.RX_SYSTEM_RESET.POLARITY">ACTIVE_HIGH</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;RX-only_Simplex&quot;)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>tx_system_reset</spirit:name>
			<spirit:displayName>tx_system_reset</spirit:displayName>
			<spirit:description>Aurora IP reset for Simplex-TX config</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>tx_system_reset</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.TX_SYSTEM_RESET.POLARITY">ACTIVE_HIGH</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;TX-only_Simplex&quot;)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt_drp_clk_in</spirit:name>
			<spirit:displayName>gt_drp_clk_in</spirit:displayName>
			<spirit:description>DRP clock for transceiver</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpclk_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.GT_DRP_CLK_IN.ASSOCIATED_BUSIF">gt0_channel_drp_if:gt1_channel_drp_if:gt2_channel_drp_if:gt3_channel_drp_if:gt4_channel_drp_if:gt5_channel_drp_if:gt6_channel_drp_if:gt7_channel_drp_if:gt8_channel_drp_if:gt9_channel_drp_if:gt10_channel_drp_if:gt11_channel_drp_if:gt12_channel_drp_if:gt13_channel_drp_if:gt14_channel_drp_if:gt15_channel_drp_if</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt0_channel_drp_if</spirit:name>
			<spirit:displayName>gt0_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for GT0</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt1_channel_drp_if</spirit:name>
			<spirit:displayName>gt1_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for GT1</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane1</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane1</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane1</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane1</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane1</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane1</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt2_channel_drp_if</spirit:name>
			<spirit:displayName>gt2_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt2</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane2</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane2</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane2</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane2</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane2</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane2</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt3_channel_drp_if</spirit:name>
			<spirit:displayName>gt3_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt3</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane3</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane3</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane3</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane3</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane3</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane3</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt4_channel_drp_if</spirit:name>
			<spirit:displayName>gt4_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt4</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane4</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane4</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane4</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane4</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane4</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane4</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt5_channel_drp_if</spirit:name>
			<spirit:displayName>gt5_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt5</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane5</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane5</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane5</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane5</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane5</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane5</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt6_channel_drp_if</spirit:name>
			<spirit:displayName>gt6_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt6</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane6</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane6</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane6</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane6</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane6</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane6</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt7_channel_drp_if</spirit:name>
			<spirit:displayName>gt7_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt7</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane7</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane7</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane7</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane7</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane7</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane7</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt8_channel_drp_if</spirit:name>
			<spirit:displayName>gt8_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt8</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane8</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane8</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane8</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane8</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane8</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane8</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt9_channel_drp_if</spirit:name>
			<spirit:displayName>gt9_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt9</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane9</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane9</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane9</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane9</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane9</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane9</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt10_channel_drp_if</spirit:name>
			<spirit:displayName>gt10_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt10</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane10</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane10</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane10</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane10</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane10</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane10</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt11_channel_drp_if</spirit:name>
			<spirit:displayName>gt11_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt11</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane11</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane11</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane11</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane11</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane11</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane11</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt12_channel_drp_if</spirit:name>
			<spirit:displayName>gt12_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt12</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane12</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane12</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane12</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane12</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane12</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane12</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt13_channel_drp_if</spirit:name>
			<spirit:displayName>gt13_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt13</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane13</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane13</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane13</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane13</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane13</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane13</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt14_channel_drp_if</spirit:name>
			<spirit:displayName>gt14_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt14</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane14</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane14</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane14</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane14</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane14</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane14</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt15_channel_drp_if</spirit:name>
			<spirit:displayName>gt15_channel_drp_if</spirit:displayName>
			<spirit:description>DRP IF for gt15</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="drp_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DO</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdo_out_lane15</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DI</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpdi_in_lane15</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpen_in_lane15</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DWE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpwe_in_lane15</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DRDY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drprdy_out_lane15</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>DADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>drpaddr_in_lane15</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15)">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt0_debug_if</spirit:name>
			<spirit:displayName>gt0_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface GT0</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true())">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt0_io_if</spirit:name>
			<spirit:displayName>gt0_io_if</spirit:displayName>
			<spirit:description>gt0 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt0_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true())">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt1_debug_if</spirit:name>
			<spirit:displayName>gt1_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt1</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt1_io_if</spirit:name>
			<spirit:displayName>gt1_io_if</spirit:displayName>
			<spirit:description>gt1 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt1_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt2_debug_if</spirit:name>
			<spirit:displayName>gt2_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt2</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt2_io_if</spirit:name>
			<spirit:displayName>gt2_io_if</spirit:displayName>
			<spirit:description>gt2 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt2_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt3_debug_if</spirit:name>
			<spirit:displayName>gt3_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt3</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt3_io_if</spirit:name>
			<spirit:displayName>gt3_io_if</spirit:displayName>
			<spirit:description>gt3 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt3_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt4_debug_if</spirit:name>
			<spirit:displayName>gt4_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt4</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt4_io_if</spirit:name>
			<spirit:displayName>gt4_io_if</spirit:displayName>
			<spirit:description>gt4 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt4_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt5_debug_if</spirit:name>
			<spirit:displayName>gt5_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt5</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt5_io_if</spirit:name>
			<spirit:displayName>gt5_io_if</spirit:displayName>
			<spirit:description>gt5 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt5_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt6_debug_if</spirit:name>
			<spirit:displayName>gt6_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt6</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt6_io_if</spirit:name>
			<spirit:displayName>gt6_io_if</spirit:displayName>
			<spirit:description>gt6 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt6_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt7_debug_if</spirit:name>
			<spirit:displayName>gt7_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt7</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt7_io_if</spirit:name>
			<spirit:displayName>gt7_io_if</spirit:displayName>
			<spirit:description>gt7 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt7_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt8_debug_if</spirit:name>
			<spirit:displayName>gt8_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt8</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt8_io_if</spirit:name>
			<spirit:displayName>gt8_io_if</spirit:displayName>
			<spirit:description>gt8 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt8_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt9_debug_if</spirit:name>
			<spirit:displayName>gt9_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt9</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt9_io_if</spirit:name>
			<spirit:displayName>gt9_io_if</spirit:displayName>
			<spirit:description>gt9 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt9_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt10_debug_if</spirit:name>
			<spirit:displayName>gt10_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt10</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt10_io_if</spirit:name>
			<spirit:displayName>gt10_io_if</spirit:displayName>
			<spirit:description>gt10 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt10_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt11_debug_if</spirit:name>
			<spirit:displayName>gt11_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt11</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt11_io_if</spirit:name>
			<spirit:displayName>gt11_io_if</spirit:displayName>
			<spirit:description>gt11 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt11_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt12_debug_if</spirit:name>
			<spirit:displayName>gt12_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt12</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt12_io_if</spirit:name>
			<spirit:displayName>gt12_io_if</spirit:displayName>
			<spirit:description>gt12 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt12_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt13_debug_if</spirit:name>
			<spirit:displayName>gt13_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt13</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt13_io_if</spirit:name>
			<spirit:displayName>gt13_io_if</spirit:displayName>
			<spirit:description>gt13 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt13_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt14_debug_if</spirit:name>
			<spirit:displayName>gt14_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt14</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt14_io_if</spirit:name>
			<spirit:displayName>gt14_io_if</spirit:displayName>
			<spirit:description>gt14 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt14_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt15_debug_if</spirit:name>
			<spirit:displayName>gt15_debug_if</spirit:displayName>
			<spirit:description>Transceiver debug interface gt15</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_ten_gig_eth_pcs_pma"
					spirit:name="transceiver_debug_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_txpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescanreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_eyescanreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_dmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_dmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescantrigger</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_eyescantrigger_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxlpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_txresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprecursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_txprecursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxresetdone</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxresetdone_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxpmareset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxpmareset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txdiffctrl</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_txdiffctrl_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpostcursor</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_txpostcursor_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_eyescandataerror</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_eyescandataerror_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxcdrhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxcdrhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txpolarity</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_txpolarity_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_rxbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>gt_txbufstatus</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_txbufstatus_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>gt15_io_if</spirit:name>
			<spirit:displayName>gt15_io_if</spirit:displayName>
			<spirit:description>gt15 IO IF</spirit:description>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="display_gig_ethernet_pcs_pma"
					spirit:name="gt_xcvr_debug_io_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyterealign</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rx_realign_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxcommadet</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxcommadet_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorsel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxmonitorsel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmlfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxlpmlfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbscntreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxprbscntreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxnotintable</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rx_not_in_table_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdisperr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rx_disp_err_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxmonitorout</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxmonitorout_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbssel</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_txprbssel_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmen</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxlpmen_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxbyteisaligned</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxbyteisaligned_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxdfelpmreset</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxdfelpmreset_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxlpmhfhold</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxlpmhfhold_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>txprbsforceerr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_txprbsforceerr_in</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>rxprbserr</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>gt15_rxprbserr_out</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
	</spirit:busInterfaces>
	<spirit:model>
		<spirit:views>
			<spirit:view>
				<spirit:name>xilinx_veriloginstantiationtemplate</spirit:name>
				<spirit:displayName>Verilog Instantiation Template</spirit:displayName>
				<spirit:envIdentifier>verilogSource:vivado.xilinx.com:synthesis.template</spirit:envIdentifier>
				<spirit:language>verilog</spirit:language>
				<spirit:fileSetRef>
					<spirit:localName>xilinx_veriloginstantiationtemplate_view_fileset</spirit:localName>
				</spirit:fileSetRef>
				<spirit:parameters>
					<spirit:parameter>
						<spirit:name>customizationCRC</spirit:name>
						<spirit:value>2704796031</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>customizationCRCversion</spirit:name>
						<spirit:value>3</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>GENtimestamp</spirit:name>
						<spirit:value>Fri Jul 18 18:09:20 UTC 2014</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>StaleAtRelink</spirit:name>
						<spirit:value>false</spirit:value>
					</spirit:parameter>
				</spirit:parameters>
			</spirit:view>
			<spirit:view>
				<spirit:name>xilinx_anylanguagesynthesis</spirit:name>
				<spirit:displayName>Synthesis</spirit:displayName>
				<spirit:envIdentifier>:vivado.xilinx.com:synthesis</spirit:envIdentifier>
				<spirit:fileSetRef>
					<spirit:localName>xilinx_anylanguagesynthesis_view_fileset</spirit:localName>
				</spirit:fileSetRef>
				<spirit:parameters>
					<spirit:parameter>
						<spirit:name>customizationCRC</spirit:name>
						<spirit:value>2704796031</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>customizationCRCversion</spirit:name>
						<spirit:value>3</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>GENtimestamp</spirit:name>
						<spirit:value>Fri Jul 18 18:09:29 UTC 2014</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>StaleAtRelink</spirit:name>
						<spirit:value>false</spirit:value>
					</spirit:parameter>
				</spirit:parameters>
			</spirit:view>
			<spirit:view>
				<spirit:name>xilinx_verilogsynthesiswrapper</spirit:name>
				<spirit:displayName>Verilog Synthesis Wrapper</spirit:displayName>
				<spirit:envIdentifier>verilogSource:vivado.xilinx.com:synthesis.wrapper</spirit:envIdentifier>
				<spirit:language>verilog</spirit:language>
				<spirit:fileSetRef>
					<spirit:localName>xilinx_verilogsynthesiswrapper_view_fileset</spirit:localName>
				</spirit:fileSetRef>
				<spirit:parameters>
					<spirit:parameter>
						<spirit:name>customizationCRC</spirit:name>
						<spirit:value>2704796031</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>customizationCRCversion</spirit:name>
						<spirit:value>3</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>GENtimestamp</spirit:name>
						<spirit:value>Fri Jul 18 18:09:29 UTC 2014</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>StaleAtRelink</spirit:name>
						<spirit:value>false</spirit:value>
					</spirit:parameter>
				</spirit:parameters>
			</spirit:view>
			<spirit:view>
				<spirit:name>xilinx_anylanguagebehavioralsimulation</spirit:name>
				<spirit:displayName>Simulation</spirit:displayName>
				<spirit:envIdentifier>:vivado.xilinx.com:simulation</spirit:envIdentifier>
				<spirit:fileSetRef>
					<spirit:localName>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:localName>
				</spirit:fileSetRef>
				<spirit:parameters>
					<spirit:parameter>
						<spirit:name>customizationCRC</spirit:name>
						<spirit:value>4132107215</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>customizationCRCversion</spirit:name>
						<spirit:value>3</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>GENtimestamp</spirit:name>
						<spirit:value>Fri Jul 18 18:09:38 UTC 2014</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>StaleAtRelink</spirit:name>
						<spirit:value>false</spirit:value>
					</spirit:parameter>
				</spirit:parameters>
			</spirit:view>
			<spirit:view>
				<spirit:name>xilinx_verilogsimulationwrapper</spirit:name>
				<spirit:displayName>Verilog Simulation Wrapper</spirit:displayName>
				<spirit:envIdentifier>verilogSource:vivado.xilinx.com:simulation.wrapper</spirit:envIdentifier>
				<spirit:language>verilog</spirit:language>
				<spirit:fileSetRef>
					<spirit:localName>xilinx_verilogsimulationwrapper_view_fileset</spirit:localName>
				</spirit:fileSetRef>
				<spirit:parameters>
					<spirit:parameter>
						<spirit:name>customizationCRC</spirit:name>
						<spirit:value>4132107215</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>customizationCRCversion</spirit:name>
						<spirit:value>3</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>GENtimestamp</spirit:name>
						<spirit:value>Fri Jul 18 18:09:39 UTC 2014</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>StaleAtRelink</spirit:name>
						<spirit:value>false</spirit:value>
					</spirit:parameter>
				</spirit:parameters>
			</spirit:view>
			<spirit:view>
				<spirit:name>xilinx_versioninformation</spirit:name>
				<spirit:displayName>Version Information</spirit:displayName>
				<spirit:envIdentifier>:vivado.xilinx.com:docs.versioninfo</spirit:envIdentifier>
				<spirit:fileSetRef>
					<spirit:localName>xilinx_versioninformation_view_fileset</spirit:localName>
				</spirit:fileSetRef>
				<spirit:parameters>
					<spirit:parameter>
						<spirit:name>customizationCRC</spirit:name>
						<spirit:value>2704796031</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>customizationCRCversion</spirit:name>
						<spirit:value>3</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>GENtimestamp</spirit:name>
						<spirit:value>Fri Jul 18 18:09:39 UTC 2014</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>StaleAtRelink</spirit:name>
						<spirit:value>false</spirit:value>
					</spirit:parameter>
				</spirit:parameters>
			</spirit:view>
			<spirit:view>
				<spirit:name>xilinx_externalfiles</spirit:name>
				<spirit:displayName>External Files</spirit:displayName>
				<spirit:envIdentifier>:vivado.xilinx.com:external.files</spirit:envIdentifier>
				<spirit:fileSetRef>
					<spirit:localName>xilinx_externalfiles_view_fileset</spirit:localName>
				</spirit:fileSetRef>
				<spirit:parameters>
					<spirit:parameter>
						<spirit:name>customizationCRC</spirit:name>
						<spirit:value>2704796031</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>customizationCRCversion</spirit:name>
						<spirit:value>3</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>GENtimestamp</spirit:name>
						<spirit:value>Thu Jan 01 00:00:00 UTC 1970</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>StaleAtRelink</spirit:name>
						<spirit:value>false</spirit:value>
					</spirit:parameter>
				</spirit:parameters>
			</spirit:view>
		</spirit:views>
		<spirit:ports>
			<spirit:port>
				<spirit:name>s_axi_tx_tdata</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))) * (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;)))*8)-1)">31</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_tx_tkeep</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))) * (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;)))-1)">3</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.INTERFACE_MODE&apos;))!=&quot;Streaming&quot;))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_tx_tlast</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.INTERFACE_MODE&apos;))!=&quot;Streaming&quot;))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_tx_tvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_tx_tready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_nfc_req</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;Duplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;Completion_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Completion_NFC&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_nfc_nb</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long">3</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;Duplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;Completion_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Completion_NFC&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_nfc_ack</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;Duplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;Completion_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Completion_NFC&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_ufc_tx_req</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Completion_NFC&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_ufc_tx_ms</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long">2</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Completion_NFC&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_ufc_tx_ack</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Completion_NFC&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rx_tdata</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))) * (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;)))*8)-1)">31</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rx_tkeep</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))) * (spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;)))-1)">3</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.INTERFACE_MODE&apos;))!=&quot;Streaming&quot;))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rx_tlast</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.INTERFACE_MODE&apos;))!=&quot;Streaming&quot;))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rx_tvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_ufc_rx_tdata</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_UFCBUSWIDTHSELECT&apos;))-1)">31</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Completion_NFC&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_ufc_rx_tkeep</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_UFCSTRBBUSWIDTHSELECT&apos;))-1)">3</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Completion_NFC&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_ufc_rx_tlast</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Completion_NFC&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_ufc_rx_tvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.USER_INTERFACE&apos;))=&quot;AXI_4_Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Immediate_NFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.FLOW_MODE&apos;))=&quot;UFC+_Completion_NFC&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>hard_err</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;Duplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rx_hard_err</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;Duplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_hard_err</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;Duplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>soft_err</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>frame_err</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.INTERFACE_MODE&apos;))!=&quot;Streaming&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>channel_up</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;Duplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rx_channel_up</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;RX-only_Simplex&quot;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_channel_up</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;TX-only_Simplex&quot;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>lane_up</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))-1)">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;Duplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rx_lane_up</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))-1)">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;RX-only_Simplex&quot;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_lane_up</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))-1)">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;TX-only_Simplex&quot;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>txp</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))-1)">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>txn</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))-1)">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rx_aligned</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;Duplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.BACKCHANNEL_MODE&apos;))!=&quot;Timer&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rx_bonded</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;Duplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.BACKCHANNEL_MODE&apos;))!=&quot;Timer&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))>=2))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rx_verify</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;Duplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.BACKCHANNEL_MODE&apos;))!=&quot;Timer&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rx_reset</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;Duplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.BACKCHANNEL_MODE&apos;))!=&quot;Timer&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>do_cc</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>warn_cc</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rx_system_reset</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;RX-only_Simplex&quot;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_system_reset</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;TX-only_Simplex&quot;)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>reset</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))=&quot;Duplex&quot;)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_reset</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>loopback</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long">2</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rxp</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))-1)">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rxn</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent">0</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))-1)">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_aligned</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;Duplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.BACKCHANNEL_MODE&apos;))!=&quot;Timer&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_bonded</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;Duplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.BACKCHANNEL_MODE&apos;))!=&quot;Timer&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;))>=2))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_verify</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;Duplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.BACKCHANNEL_MODE&apos;))!=&quot;Timer&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_reset</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;Duplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and (spirit:decode(id(&apos;MODELPARAM_VALUE.BACKCHANNEL_MODE&apos;))!=&quot;Timer&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>crc_valid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_CRC&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.INTERFACE_MODE&apos;)))=&quot;Framing&quot;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>crc_pass_fail_n</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_CRC&apos;))) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.INTERFACE_MODE&apos;)))=&quot;Framing&quot;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpclk_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane1</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane1</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane1</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane1</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane1</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane1</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane2</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane2</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane2</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane2</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane2</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane2</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane3</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane3</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane3</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane3</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane3</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane3</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane4</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane4</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane4</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane4</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane4</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane4</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane5</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane5</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane5</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane5</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane5</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane5</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane6</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane6</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane6</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane6</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane6</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane6</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane7</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane7</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane7</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane7</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane7</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane7</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane8</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane8</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane8</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane8</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane8</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane8</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane9</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane9</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane9</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane9</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane9</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane9</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane10</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane10</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane10</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane10</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane10</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane10</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane11</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane11</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane11</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane11</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane11</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane11</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane12</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane12</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane12</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane12</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane12</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane12</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane13</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane13</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane13</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane13</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane13</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane13</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane14</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane14</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane14</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane14</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane14</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane14</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpaddr_in_lane15</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>8</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpen_in_lane15</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdi_in_lane15</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drprdy_out_lane15</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpdo_out_lane15</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>15</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>drpwe_in_lane15</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rx_snf</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFC&apos;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>m_axi_rx_fc_nb</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>0</spirit:left>
						<spirit:right>3</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFC&apos;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>power_down</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_lock</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_resetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>rx_resetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>link_reset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_common_reset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll0outclk_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll1outclk_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll0outrefclk_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll1outrefclk_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll0outclk_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll1outclk_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll0outrefclk_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll1outrefclk_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>3) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>3) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>3) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>4) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>4) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>4) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>5) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>5) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>5) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>6) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>6) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>6) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>7) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>7) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>7) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>8) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>8) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>8) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>9) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>9) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>9) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>10) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>10) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>10) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_qplllock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>11) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_qpllrefclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>11) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_qpllreset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>11) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad1_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_1&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_2&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_3&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_4&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad1_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_1&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_2&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_3&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_4&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad2_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_5&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_6&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_7&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_8&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad2_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_5&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_6&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_7&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_8&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad3_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_9&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_10&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_11&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_12&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad3_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_9&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_10&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_11&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_12&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad4_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_13&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_14&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_15&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_16&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad4_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_13&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_14&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_15&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_16&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad5_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_17&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_18&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_19&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_20&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad5_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_17&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_18&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_19&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_20&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad6_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_21&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_22&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_23&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_24&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad6_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_21&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_22&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_23&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_24&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad7_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_25&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_26&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_27&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_28&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad7_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_25&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_26&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_27&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_28&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad8_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_29&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_30&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_31&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_32&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad8_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_29&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_30&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_31&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_32&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad9_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_33&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_34&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_35&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_36&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad9_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_33&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_34&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_35&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_36&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad10_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_37&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_38&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_39&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_40&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad10_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_37&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_38&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_39&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_40&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad11_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_41&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_42&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_43&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_44&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad11_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_41&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_42&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_43&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_44&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad12_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_45&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_46&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_47&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_48&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad12_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_45&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_46&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_47&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_49&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll0refclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll0refclklost_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>quad1_common_lock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>quad2_common_lock_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>init_clk_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false())">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>pll_not_locked</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>tx_out_clk</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>init_clk_p</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>init_clk_n</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>user_clk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>pll_not_locked_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>sys_reset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>user_clk</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false())">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>sync_clk</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_refclk1</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_refclk2</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=false) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_CLOCK_2&apos;))!=&quot;None&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_refclk1_p</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_refclk1_n</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_refclk2_p</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_CLOCK_2&apos;))!=&quot;None&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_refclk2_n</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_CLOCK_2&apos;))!=&quot;None&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxlpmhfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxlpmlfhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxlpmen_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxcdrovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxdfelpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxmonitorsel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_eyescanreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_eyescandataerror_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxbyteisaligned_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxcommadet_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rx_realign_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rx_disp_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rx_not_in_table_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_tx_buf_err_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txpolarity_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txchardispmode_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txchardispval_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LANE_WIDTH&apos;))-1)">3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txpostcursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txprecursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>4</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txdiffctrl_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>3</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txmaincursor_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>6</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>sync_clk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true)">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>init_clk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_reset_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_refclk1_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true())">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_refclk2_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true()) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_CLOCK_2&apos;))!=&quot;None&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll0refclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll0refclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>quad1_common_lock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>quad2_common_lock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll0outclk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll1outclk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll0outrefclk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll1outrefclk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll0outclk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll1outclk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll0outrefclk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll1outrefclk_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;))=2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>3) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>3) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>4) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>4) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>5) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>5) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>6) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>6) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>7) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>7) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>8) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>8) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>9) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>9) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>10) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>10) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_qplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>11) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_qpllrefclklost_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>11) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad1_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_1&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_2&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_3&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_4&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad1_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_1&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_2&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_3&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_4&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad2_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_5&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_6&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_7&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_8&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad2_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_5&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_6&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_7&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_8&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad3_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_9&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_10&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_11&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_12&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad3_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_9&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_10&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_11&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_12&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad4_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_13&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_14&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_15&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_16&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad4_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_13&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_14&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_15&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_16&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad5_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_17&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_18&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_19&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_20&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad5_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_17&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_18&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_19&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_20&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad6_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_21&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_22&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_23&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_24&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad6_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_21&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_22&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_23&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_24&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad7_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_25&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_26&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_27&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_28&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad7_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_25&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_26&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_27&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_28&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad8_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_29&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_30&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_31&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_32&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad8_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_29&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_30&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_31&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_32&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad9_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_33&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_34&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_35&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_36&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad9_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_33&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_34&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_35&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_36&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad10_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_37&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_38&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_39&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_40&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad10_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_37&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_38&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_39&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_40&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad11_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_41&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_42&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_43&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_44&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad11_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_41&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_42&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_43&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_44&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllclk_quad12_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_45&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_46&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_47&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_48&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt_qpllrefclk_quad12_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.supportlevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_45&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_46&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_47&apos;))!=&quot;X&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_LOC_49&apos;))!=&quot;X&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_eyescantrigger_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll0lock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.SupportLevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_pll1lock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.SupportLevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll0lock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.SupportLevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_pll1lock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.SupportLevel&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.GTQUADCNT&apos;)))>1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_cplllock_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;kintex7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qkintex7l&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qvirtex7&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;zynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qzynq&quot;)  or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;virtex7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txprbsforceerr_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxlpmhfovrden_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxlpmreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;)))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxcdrhold_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxprbserr_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxprbssel_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxprbscntreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxpcsreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxpmareset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxbufreset_in</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_dmonitorout_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.PORT7DMONITOROUT&apos;)))">7</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_txbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>1</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;RX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxbufstatus_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left>2</spirit:left>
						<spirit:right>0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt0_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt1_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt2_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>2) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt3_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>3) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt4_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>4) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt5_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>5) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt6_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>6) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt7_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>7) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt8_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>8) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt9_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>9) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt10_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>10) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt11_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>11) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt12_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>12) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt13_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>13) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt14_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>14) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>gt15_rxpmaresetdone_out</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
							<spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.TransceiverControl&apos;))=true) and (spirit:decode(id(&apos;MODELPARAM_VALUE.DATAFLOW_CONFIG&apos;))!=&quot;TX-only_Simplex&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_AURORA_LANES&apos;)))>15) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.isv7gth&apos;))=true) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;artix7l&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;qartix7&quot;) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))=&quot;aartix7&quot;))))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
		</spirit:ports>
		<spirit:modelParameters>
			<spirit:modelParameter xsi:type="spirit:nameValueTypeType"
					spirit:dataType="string">
				<spirit:name>component_name</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.COMPONENT_NAME">aurora_8b10b_0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_column_used</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_COLUMN_USED">left</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_family</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_FAMILY">kintex7</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_device</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_DEVICE">xc7k160t</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_row_used</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_ROW_USED">None</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_xpackage</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_XPACKAGE">fbg676</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_xspeedgrade</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_XSPEEDGRADE">-1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_aurora_lanes</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AURORA_LANES">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_lane_width</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_LANE_WIDTH">4</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>interface_mode</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.INTERFACE_MODE">Framing</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="boolean">
				<spirit:name>c_stream</spirit:name>
				<spirit:value spirit:format="bool"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_STREAM">false</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>dataflow_config</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.DATAFLOW_CONFIG">Duplex</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>backchannel_mode</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.BACKCHANNEL_MODE">Sidebands</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="boolean">
				<spirit:name>c_simplex</spirit:name>
				<spirit:value spirit:format="bool"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_SIMPLEX">false</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_simplex_mode</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_SIMPLEX_MODE">TX</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>flow_mode</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.FLOW_MODE">None</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="boolean">
				<spirit:name>c_nfc</spirit:name>
				<spirit:value spirit:format="bool"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_NFC">false</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_nfc_mode</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_NFC_MODE">IMM</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="boolean">
				<spirit:name>c_ufc</spirit:name>
				<spirit:value spirit:format="bool"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_UFC">false</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_line_rate</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_LINE_RATE">45000</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_refclk_frequency</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_REFCLK_FREQUENCY">90000</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_1</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_1">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_2</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_2">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_3</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_3">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_4</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_4">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_5</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_5">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_6</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_6">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_7</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_7">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_8</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_8">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_9</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_9">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_10</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_10">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_11</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_11">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_12</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_12">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_13</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_13">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_14</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_14">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_15</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_15">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_16</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_16">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_17</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_17">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_18</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_18">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_19</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_19">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_20</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_20">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_21</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_21">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_22</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_22">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_23</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_23">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_24</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_24">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_25</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_25">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_26</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_26">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_27</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_27">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_28</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_28">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_29</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_29">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_30</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_30">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_31</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_31">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_32</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_32">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_33</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_33">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_34</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_34">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_35</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_35">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_36</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_36">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_37</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_37">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_38</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_38">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_39</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_39">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_40</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_40">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_41</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_41">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_42</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_42">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_43</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_43">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_44</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_44">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_45</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_45">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_46</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_46">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_47</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_47">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_loc_48</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_LOC_48">X</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_clock_1</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_CLOCK_1">GTXQ1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>c_gt_clock_2</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_GT_CLOCK_2">None</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="boolean">
				<spirit:name>c_use_scrambler</spirit:name>
				<spirit:value spirit:format="bool"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_USE_SCRAMBLER">false</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="boolean">
				<spirit:name>c_use_chipscope</spirit:name>
				<spirit:value spirit:format="bool"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_USE_CHIPSCOPE">false</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="boolean">
				<spirit:name>transceivercontrol</spirit:name>
				<spirit:value spirit:format="bool"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.TransceiverControl">false</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="boolean">
				<spirit:name>c_use_crc</spirit:name>
				<spirit:value spirit:format="bool"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_USE_CRC">false</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="boolean">
				<spirit:name>supportlevel</spirit:name>
				<spirit:value spirit:format="bool"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.supportlevel">false</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_cpll_fbdiv</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_CPLL_FBDIV">5</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_cpll_fbdiv_45</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_CPLL_FBDIV_45">5</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_cpll_refclk_div</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_CPLL_REFCLK_DIV">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_rxoutdiv</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_RXOUTDIV">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_txoutdiv</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_TXOUTDIV">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="string">
				<spirit:name>user_interface</spirit:name>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.USER_INTERFACE">AXI_4_Streaming</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_ufcbuswidthselect</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_UFCBUSWIDTHSELECT">32</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_ufcrembuswidthselect</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_UFCREMBUSWIDTHSELECT">2</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_ufcstrbbuswidthselect</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_UFCSTRBBUSWIDTHSELECT">4</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>c_rembuswidthselect</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_REMBUSWIDTHSELECT">2</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="boolean">
				<spirit:name>isv7gth</spirit:name>
				<spirit:value spirit:format="bool"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.isv7gth">false</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>gtquadcnt</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.GTQUADCNT">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>port7dmonitorout</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.PORT7DMONITOROUT">7</spirit:value>
			</spirit:modelParameter>
		</spirit:modelParameters>
	</spirit:model>
	<spirit:choices>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_AURORA_LANES</spirit:name>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
			<spirit:enumeration spirit:text="2">2</spirit:enumeration>
			<spirit:enumeration spirit:text="3">3</spirit:enumeration>
			<spirit:enumeration spirit:text="4">4</spirit:enumeration>
			<spirit:enumeration spirit:text="5">5</spirit:enumeration>
			<spirit:enumeration spirit:text="6">6</spirit:enumeration>
			<spirit:enumeration spirit:text="7">7</spirit:enumeration>
			<spirit:enumeration spirit:text="8">8</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_LANE_WIDTH</spirit:name>
			<spirit:enumeration spirit:text="2">2</spirit:enumeration>
			<spirit:enumeration spirit:text="4">4</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_REFCLK_FREQUENCY</spirit:name>
			<spirit:enumeration spirit:text="112.500">112.500</spirit:enumeration>
			<spirit:enumeration spirit:text="140.625">140.625</spirit:enumeration>
			<spirit:enumeration spirit:text="150.000">150.000</spirit:enumeration>
			<spirit:enumeration spirit:text="180.000">180.000</spirit:enumeration>
			<spirit:enumeration spirit:text="187.500">187.500</spirit:enumeration>
			<spirit:enumeration spirit:text="225.000">225.000</spirit:enumeration>
			<spirit:enumeration spirit:text="281.250">281.250</spirit:enumeration>
			<spirit:enumeration spirit:text="300.000">300.000</spirit:enumeration>
			<spirit:enumeration spirit:text="375.000">375.000</spirit:enumeration>
			<spirit:enumeration spirit:text="450.000">450.000</spirit:enumeration>
			<spirit:enumeration spirit:text="562.500">562.500</spirit:enumeration>
			<spirit:enumeration spirit:text="90.000">90.000</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_Interface_Mode</spirit:name>
			<spirit:enumeration spirit:text="Framing">Framing</spirit:enumeration>
			<spirit:enumeration spirit:text="Streaming">Streaming</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_Flow_Mode</spirit:name>
			<spirit:enumeration spirit:text="None">None</spirit:enumeration>
			<spirit:enumeration spirit:text="UFC">UFC</spirit:enumeration>
			<spirit:enumeration spirit:text="Immediate NFC">Immediate_NFC</spirit:enumeration>
			<spirit:enumeration spirit:text="Completion NFC">Completion_NFC</spirit:enumeration>
			<spirit:enumeration spirit:text="UFC+ Immediate NFC">UFC+_Immediate_NFC</spirit:enumeration>
			<spirit:enumeration spirit:text="UFC+ Completion NFC">UFC+_Completion_NFC</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_Backchannel_mode</spirit:name>
			<spirit:enumeration spirit:text="Sidebands">Sidebands</spirit:enumeration>
			<spirit:enumeration spirit:text="Timer">Timer</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_COLUMN_USED</spirit:name>
			<spirit:enumeration spirit:text="left">left</spirit:enumeration>
			<spirit:enumeration spirit:text="left">left</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_ROW_USED</spirit:name>
			<spirit:enumeration spirit:text="None">None</spirit:enumeration>
			<spirit:enumeration spirit:text="None">None</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_48</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_47</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_46</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_45</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_44</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_43</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_42</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_41</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_40</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_39</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_38</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_37</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_36</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_35</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_34</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_33</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_32</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_31</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_30</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_29</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_28</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_27</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_26</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_25</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_24</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_23</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_22</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_21</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_20</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_19</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_18</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_17</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_16</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_15</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_14</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_13</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_12</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_11</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_10</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_9</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_8</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_7</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_6</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_5</spirit:name>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_4</spirit:name>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_3</spirit:name>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_2</spirit:name>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_LOC_1</spirit:name>
			<spirit:enumeration spirit:text="X">X</spirit:enumeration>
			<spirit:enumeration spirit:text="1">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_CLOCK_1</spirit:name>
			<spirit:enumeration spirit:text="GTXQ1">GTXQ1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_C_GT_CLOCK_2</spirit:name>
			<spirit:enumeration spirit:text="None">None</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_SupportLevel</spirit:name>
			<spirit:enumeration spirit:text="include Shared Logic in core">1</spirit:enumeration>
			<spirit:enumeration spirit:text="include Shared Logic in example design">0</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>xippack_UserParameter_choiceref_Dataflow_Config</spirit:name>
			<spirit:enumeration spirit:text="Duplex">Duplex</spirit:enumeration>
			<spirit:enumeration spirit:text="RX-only Simplex">RX-only_Simplex</spirit:enumeration>
			<spirit:enumeration spirit:text="TX-only Simplex">TX-only_Simplex</spirit:enumeration>
		</spirit:choice>
	</spirit:choices>
	<spirit:fileSets>
		<spirit:fileSet>
			<spirit:name>xilinx_veriloginstantiationtemplate_view_fileset</spirit:name>
			<spirit:file>
				<spirit:name>aurora_8b10b_0.veo</spirit:name>
				<spirit:userFileType>verilogTemplate</spirit:userFileType>
			</spirit:file>
		</spirit:fileSet>
		<spirit:fileSet>
			<spirit:name>xilinx_anylanguagesynthesis_view_fileset</spirit:name>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_reset_logic.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0_core.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_aurora_lane_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_axi_to_ll.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_channel_err_detect.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_channel_init_sm.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_chbond_count_dec_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_err_detect_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_global_logic.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_hotplug.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_idle_and_ver_gen.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_lane_init_sm_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_left_align_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_left_align_mux.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_ll_to_axi.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_output_mux.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_output_switch_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_rx_ll.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_rx_ll_deframer.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_rx_ll_pdu_datapath.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_sideband_output.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_storage_ce_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_storage_count_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_storage_mux.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_storage_switch_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_sym_dec_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_sym_gen_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_cdc_sync.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/gt/aurora_8b10b_0_tx_startup_fsm.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/gt/aurora_8b10b_0_rx_startup_fsm.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/gt/aurora_8b10b_0_gt.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/gt/aurora_8b10b_0_multi_gt.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/gt/aurora_8b10b_0_transceiver_wrapper.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_tx_ll.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_tx_ll_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_tx_ll_datapath.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_valid_data_counter.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0_clocks.xdc</spirit:name>
				<spirit:userFileType>xdc</spirit:userFileType>
				<spirit:define>
					<spirit:name>processing_order</spirit:name>
					<spirit:value>late</spirit:value>
				</spirit:define>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0_ooc.xdc</spirit:name>
				<spirit:userFileType>xdc</spirit:userFileType>
				<spirit:userFileType>USED_IN_out_of_context</spirit:userFileType>
				<spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
				<spirit:userFileType>USED_IN_implementation</spirit:userFileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
		</spirit:fileSet>
		<spirit:fileSet>
			<spirit:name>xilinx_verilogsynthesiswrapper_view_fileset</spirit:name>
			<spirit:file>
				<spirit:name>aurora_8b10b_0.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
		</spirit:fileSet>
		<spirit:fileSet>
			<spirit:name>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:name>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_reset_logic.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0_core.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_aurora_lane_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_axi_to_ll.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_channel_err_detect.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_channel_init_sm.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_chbond_count_dec_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_err_detect_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_global_logic.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_hotplug.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_idle_and_ver_gen.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_lane_init_sm_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_left_align_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_left_align_mux.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_ll_to_axi.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_output_mux.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_output_switch_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_rx_ll.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_rx_ll_deframer.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_rx_ll_pdu_datapath.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_sideband_output.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_storage_ce_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_storage_count_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_storage_mux.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_storage_switch_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_sym_dec_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_sym_gen_4byte.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_cdc_sync.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/gt/aurora_8b10b_0_tx_startup_fsm.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/gt/aurora_8b10b_0_rx_startup_fsm.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/gt/aurora_8b10b_0_gt.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/gt/aurora_8b10b_0_multi_gt.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/gt/aurora_8b10b_0_transceiver_wrapper.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_tx_ll.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_tx_ll_control.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_tx_ll_datapath.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0/src/aurora_8b10b_0_valid_data_counter.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
		</spirit:fileSet>
		<spirit:fileSet>
			<spirit:name>xilinx_verilogsimulationwrapper_view_fileset</spirit:name>
			<spirit:file>
				<spirit:name>aurora_8b10b_0.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
			</spirit:file>
		</spirit:fileSet>
		<spirit:fileSet>
			<spirit:name>xilinx_versioninformation_view_fileset</spirit:name>
			<spirit:file>
				<spirit:name>doc/aurora_8b10b_v10_1_changelog.txt</spirit:name>
				<spirit:userFileType>text</spirit:userFileType>
			</spirit:file>
		</spirit:fileSet>
		<spirit:fileSet>
			<spirit:name>xilinx_externalfiles_view_fileset</spirit:name>
			<spirit:file>
				<spirit:name>aurora_8b10b_0.dcp</spirit:name>
				<spirit:userFileType>dcp</spirit:userFileType>
				<spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
				<spirit:userFileType>USED_IN_implementation</spirit:userFileType>
				<spirit:logicalName>work</spirit:logicalName>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0_stub.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
				<spirit:userFileType>USED_IN_synth_blackbox_stub</spirit:userFileType>
				<spirit:logicalName>work</spirit:logicalName>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0_funcsim.v</spirit:name>
				<spirit:fileType>verilogSource</spirit:fileType>
				<spirit:userFileType>USED_IN_simulation</spirit:userFileType>
				<spirit:userFileType>USED_IN_single_language</spirit:userFileType>
				<spirit:logicalName>work</spirit:logicalName>
			</spirit:file>
			<spirit:file>
				<spirit:name>aurora_8b10b_0_funcsim.vhdl</spirit:name>
				<spirit:fileType>vhdlSource</spirit:fileType>
				<spirit:userFileType>USED_IN_simulation</spirit:userFileType>
				<spirit:userFileType>USED_IN_single_language</spirit:userFileType>
				<spirit:logicalName>work</spirit:logicalName>
			</spirit:file>
		</spirit:fileSet>
	</spirit:fileSets>
	<spirit:description>Customizable multi-lane gigabit serial link implementing the Aurora 8B10B protocol</spirit:description>
	<spirit:parameters>
		<spirit:parameter>
			<spirit:name>Component_Name</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.COMPONENT_NAME"
					spirit:order="1">aurora_8b10b_0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AURORA_LANES</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AURORA_LANES"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_AURORA_LANES"
					spirit:order="2">1</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_LANE_WIDTH</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_LANE_WIDTH"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_LANE_WIDTH"
					spirit:order="3">4</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_LINE_RATE</spirit:name>
			<spirit:value spirit:format="float"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_LINE_RATE"
					spirit:order="4"
					spirit:minimum="0.5"
					spirit:maximum="6.6"
					spirit:rangeType="float">4.5</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_REFCLK_FREQUENCY</spirit:name>
			<spirit:displayName>C Refclk Frequency</spirit:displayName>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_REFCLK_FREQUENCY"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_REFCLK_FREQUENCY"
					spirit:order="5">90.000</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>Dataflow_Config</spirit:name>
			<spirit:displayName>Dataflow Config</spirit:displayName>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.DATAFLOW_CONFIG"
					spirit:choiceRef="xippack_UserParameter_choiceref_Dataflow_Config"
					spirit:order="6">Duplex</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>Interface_Mode</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.INTERFACE_MODE"
					spirit:choiceRef="xippack_UserParameter_choiceref_Interface_Mode"
					spirit:order="7">Framing</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>Flow_Mode</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.FLOW_MODE"
					spirit:choiceRef="xippack_UserParameter_choiceref_Flow_Mode"
					spirit:order="8">None</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>Backchannel_mode</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.BACKCHANNEL_MODE"
					spirit:choiceRef="xippack_UserParameter_choiceref_Backchannel_mode"
					spirit:order="9">Sidebands</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_COLUMN_USED</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_COLUMN_USED"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_COLUMN_USED"
					spirit:order="10">left</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_ROW_USED</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_ROW_USED"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_ROW_USED"
					spirit:order="11">None</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_48</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_48"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_48"
					spirit:order="59">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_47</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_47"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_47"
					spirit:order="58">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_46</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_46"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_46"
					spirit:order="57">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_45</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_45"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_45"
					spirit:order="56">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_44</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_44"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_44"
					spirit:order="55">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_43</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_43"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_43"
					spirit:order="54">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_42</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_42"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_42"
					spirit:order="53">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_41</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_41"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_41"
					spirit:order="52">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_40</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_40"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_40"
					spirit:order="51">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_39</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_39"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_39"
					spirit:order="50">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_38</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_38"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_38"
					spirit:order="49">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_37</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_37"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_37"
					spirit:order="48">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_36</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_36"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_36"
					spirit:order="47">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_35</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_35"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_35"
					spirit:order="46">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_34</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_34"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_34"
					spirit:order="45">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_33</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_33"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_33"
					spirit:order="44">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_32</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_32"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_32"
					spirit:order="43">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_31</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_31"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_31"
					spirit:order="42">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_30</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_30"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_30"
					spirit:order="41">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_29</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_29"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_29"
					spirit:order="40">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_28</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_28"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_28"
					spirit:order="39">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_27</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_27"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_27"
					spirit:order="38">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_26</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_26"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_26"
					spirit:order="37">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_25</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_25"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_25"
					spirit:order="36">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_24</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_24"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_24"
					spirit:order="35">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_23</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_23"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_23"
					spirit:order="34">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_22</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_22"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_22"
					spirit:order="33">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_21</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_21"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_21"
					spirit:order="32">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_20</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_20"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_20"
					spirit:order="31">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_19</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_19"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_19"
					spirit:order="30">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_18</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_18"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_18"
					spirit:order="29">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_17</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_17"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_17"
					spirit:order="28">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_16</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_16"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_16"
					spirit:order="27">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_15</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_15"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_15"
					spirit:order="26">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_14</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_14"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_14"
					spirit:order="25">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_13</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_13"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_13"
					spirit:order="24">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_12</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_12"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_12"
					spirit:order="23">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_11</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_11"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_11"
					spirit:order="22">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_10</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_10"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_10"
					spirit:order="21">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_9</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_9"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_9"
					spirit:order="20">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_8</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_8"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_8"
					spirit:order="19">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_7</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_7"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_7"
					spirit:order="18">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_6</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_6"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_6"
					spirit:order="17">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_5</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_5"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_5"
					spirit:order="16">1</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_4</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_4"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_4"
					spirit:order="15">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_3</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_3"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_3"
					spirit:order="14">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_2</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_2"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_2"
					spirit:order="13">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_LOC_1</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_LOC_1"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_LOC_1"
					spirit:order="12">X</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_CLOCK_1</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_CLOCK_1"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_CLOCK_1"
					spirit:order="60">GTXQ1</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_GT_CLOCK_2</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_GT_CLOCK_2"
					spirit:choiceRef="xippack_UserParameter_choiceref_C_GT_CLOCK_2"
					spirit:order="61">None</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_USE_CHIPSCOPE</spirit:name>
			<spirit:value spirit:format="bool"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_USE_CHIPSCOPE"
					spirit:order="62">false</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_USE_SCRAMBLER</spirit:name>
			<spirit:value spirit:format="bool"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_USE_SCRAMBLER"
					spirit:order="63">false</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_USE_CRC</spirit:name>
			<spirit:value spirit:format="bool"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_USE_CRC"
					spirit:order="64">false</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>SupportLevel</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.SupportLevel"
					spirit:choiceRef="xippack_UserParameter_choiceref_SupportLevel"
					spirit:order="65">0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>TransceiverControl</spirit:name>
			<spirit:value spirit:format="bool"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.TransceiverControl"
					spirit:order="66">false</spirit:value>
		</spirit:parameter>
	</spirit:parameters>
	<spirit:vendorExtensions>
		<xilinx:coreExtensions>
			<xilinx:supportedFamilies>
				<xilinx:family xilinx:lifeCycle="Production">kintex7</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">kintex7l</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qkintex7</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qkintex7l</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qvirtex7</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z030fbg484-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z030fbg484-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z030fbg484-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z030fbg676-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z030fbg676-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z030fbg676-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z030ffg676-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z030ffg676-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z030ffg676-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z045ffg900-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z045ffg900-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z045ffg900-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z045fbg676-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z045fbg676-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z045fbg676-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z045ffg676-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z045ffg676-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z045ffg676-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z100ffg900-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z100ffg900-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z100ffg900-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z100ffg1156-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z100ffg1156-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq{xc7z100ffg1156-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rb484-1I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rb484-2I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rb484-1Q}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rf676-1I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rf676-2I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rf676-1Q}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z045rf676-1I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z045rf676-2I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z045rf676-1Q}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rb484-1i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rb484-2i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rb484-1q}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rf676-1i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rf676-2i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z030rf676-1q}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z045rf676-1i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z045rf676-2i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq{xq7z045rf676-1q}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tfhg1761-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tfhg1761-2g}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tfhg1761-2G}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tfhg1761-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tfhg1761-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tfhg1761-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tflg1925-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tflg1925-2g}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tflg1925-2G}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tflg1925-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tflg1925-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v2000tflg1925-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v585tffg1157-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v585tffg1157-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v585tffg1157-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v585tffg1157-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v585tffg1157-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v585tffg1761-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v585tffg1761-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v585tffg1761-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v585tffg1761-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7v585tffg1761-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1155-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1155-2g}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1155-2G}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1155-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1155-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1155-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1931-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1931-2g}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1931-2G}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1931-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1931-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1931-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1932-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1932-2g}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1932-2G}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1932-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1932-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh580thcg1932-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1931-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1931-2g}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1931-2G}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1931-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1931-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1931-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1932-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1932-2g}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1932-2G}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1932-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1932-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vh870thcg1932-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1926-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1926-2g}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1926-2G}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1926-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1926-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1926-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1928-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1928-2g}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1928-2G}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1928-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1928-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1928-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1930-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1930-2g}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1930-2G}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1930-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1930-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx1140tflg1930-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx330tffg1157-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx330tffg1157-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx330tffg1157-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx330tffg1157-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx330tffg1157-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx330tffg1761-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx330tffg1761-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx330tffg1761-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx330tffg1761-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx330tffg1761-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1157-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1157-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1157-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1157-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1157-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1158-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1158-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1158-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1158-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1158-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1927-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1927-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1927-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1927-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx415tffg1927-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1157-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1157-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1157-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1157-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1157-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1158-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1158-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1158-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1158-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1158-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1761-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1761-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1761-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1761-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1761-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1927-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1927-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1927-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1927-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1927-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1930-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1930-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1930-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1930-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx485tffg1930-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx550tffg1158-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx550tffg1158-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx550tffg1158-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx550tffg1158-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx550tffg1158-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx550tffg1927-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx550tffg1927-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx550tffg1927-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx550tffg1927-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx550tffg1927-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1157-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1157-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1157-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1157-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1157-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1158-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1158-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1158-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1158-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1158-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1761-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1761-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1761-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1761-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1761-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1926-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1926-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1926-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1926-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1926-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1927-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1927-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1927-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1927-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1927-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1930-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1930-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1930-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1930-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx690tffg1930-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1926-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1926-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1926-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1926-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1928-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1928-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1928-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1928-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1930-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1930-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1930-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7{xc7vx980tffg1930-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb676-2i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb676-2I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a75tfgg484-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a100tfgg484-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tsbg484-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a75tfgg484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a75tfgg484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a100tfgg484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a100tfgg484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tffg1156-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tffg1156-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a75tfgg676-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a100tfgg676-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tfbg484-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a200tlsbg484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">aartix7{xa7a100tfgg484-1q}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a200tlsbg484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">aartix7{xa7a100tfgg484-1Q}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tfbg676-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trs484-2i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a100tfg484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trs484-2I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a100tfg484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tsbg484-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a100tfg484-1m}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a100tfg484-1M}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tfbg484-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tsbg484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tsbg484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a75tfgg676-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a100tfgg676-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a200tlfbg484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a200tlfbg484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">aartix7{xa7a100tfgg484-2i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">aartix7{xa7a100tfgg484-2I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tffg1156-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb484-2i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb484-2I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a75tfgg484-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a100tfgg484-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tfbg484-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a75tlfgg484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a75tlfgg484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a100tlfgg484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a100tlfgg484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tffg1156-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb676-1i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb676-1I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tfbg676-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trs484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trs484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">aartix7{xa7a100tfgg484-1i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">aartix7{xa7a100tfgg484-1I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a100tfg484-2i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a200tlfbg676-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb676-1m}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a100tfg484-2I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a200tlfbg676-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb676-1M}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a75tfgg484-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a100tfgg484-2}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb484-1i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb484-1I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a75tlfgg676-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a75tlfgg676-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a100tlfgg676-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a100tlfgg676-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tfbg676-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tffg1156-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a200tlffg1156-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tfbg484-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a100tfg484-1i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tfbg676-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb676-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trs484-1i}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a75tfgg676-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a100tfgg676-2l}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trs484-1m}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l{xc7a200tlffg1156-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tfbg484-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a100tfg484-1I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tfbg676-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb676-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trs484-1I}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a75tfgg676-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a100tfgg676-2L}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trs484-1M}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a75tfgg676-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a100tfgg676-3}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7{xc7a200tsbg484-1}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb484-1m}</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7{xq7a200trb484-1M}</xilinx:family>
			</xilinx:supportedFamilies>
			<xilinx:taxonomies>
				<xilinx:taxonomy>/Communication_&amp;_Networking/Serial_Interfaces</xilinx:taxonomy>
			</xilinx:taxonomies>
			<xilinx:displayName>Aurora 8B10B</xilinx:displayName>
			<xilinx:vendorURL>http://www.xilinx.com</xilinx:vendorURL>
			<xilinx:coreRevision>0</xilinx:coreRevision>
			<xilinx:upgrades>
				<xilinx:canUpgradeFrom>xilinx.com:ip:aurora_8b10b:8.1</xilinx:canUpgradeFrom>
				<xilinx:canUpgradeFrom>xilinx.com:ip:aurora_8b10b:8.2</xilinx:canUpgradeFrom>
				<xilinx:canUpgradeFrom>xilinx.com:ip:aurora_8b10b:8.3</xilinx:canUpgradeFrom>
				<xilinx:canUpgradeFrom>xilinx.com:ip:aurora_8b10b:9.0</xilinx:canUpgradeFrom>
				<xilinx:canUpgradeFrom>xilinx.com:ip:aurora_8b10b:9.1</xilinx:canUpgradeFrom>
				<xilinx:canUpgradeFrom>xilinx.com:ip:aurora_8b10b:9.2</xilinx:canUpgradeFrom>
				<xilinx:canUpgradeFrom>xilinx.com:ip:aurora_8b10b:10.0</xilinx:canUpgradeFrom>
			</xilinx:upgrades>
			<xilinx:coreCreationDateTime>2013-12-02T19:25:49Z</xilinx:coreCreationDateTime>
		</xilinx:coreExtensions>
		<xilinx:packagingInfo>
			<xilinx:xilinxVersion>2013.4</xilinx:xilinxVersion>
		</xilinx:packagingInfo>
	</spirit:vendorExtensions>
</spirit:component>
